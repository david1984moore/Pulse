import { Link, useLocation } from "wouter";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useAuth } from "@/hooks/use-auth";
import { useLanguage } from "@/hooks/use-language";
import { PulseLogo } from "@/components/ui/pulse-logo";
import { userAuthSchema } from "@shared/schema";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

type LoginFormValues = {
  email: string;
  password: string;
  rememberMe?: boolean;
};

type RegisterFormValues = {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
};

export default function AuthPage() {
  const [, setLocation] = useLocation();
  const params = new URLSearchParams(window.location.search);
  const mode = params.get("mode") || "login";
  const { loginMutation, registerMutation, user } = useAuth();
  const { t } = useLanguage();
  const [activeTab, setActiveTab] = useState(mode);

  useEffect(() => {
    if (user) {
      setLocation("/dashboard");
    }
  }, [user, setLocation]);

  const loginForm = useForm<LoginFormValues>({
    resolver: zodResolver(
      z.object({
        email: z.string().email(t("emailLabel")),
        password: z.string().min(1, t("passwordLabel")),
        rememberMe: z.boolean().optional(),
      })
    ),
    defaultValues: {
      email: "",
      password: "",
      rememberMe: false,
    },
  });

  const registerForm = useForm<RegisterFormValues>({
    resolver: zodResolver(
      userAuthSchema
        .extend({
          confirmPassword: z.string().min(1, t("confirmPasswordLabel")),
        })
        .refine((data) => data.password === data.confirmPassword, {
          message: t("passwordsDontMatch"),
          path: ["confirmPassword"],
        })
    ),
    defaultValues: {
      name: "",
      email: "",
      password: "",
      confirmPassword: "",
    },
  });

  const onLoginSubmit = (data: LoginFormValues) => {
    loginMutation.mutate({
      email: data.email,
      password: data.password,
    });
  };

  const onRegisterSubmit = (data: RegisterFormValues) => {
    registerMutation.mutate({
      name: data.name,
      email: data.email,
      password: data.password,
    });
  };

  const handleTabChange = (value: string) => {
    setActiveTab(value);
    setLocation(`/auth?mode=${value}`);
  };

  return (
    <div className="min-h-screen flex flex-col justify-center items-center bg-gradient-to-b from-white to-gray-50 p-4">
      <div className="mb-8">
        <Link href="/">
          <div className="cursor-pointer">
            <PulseLogo size="lg" />
          </div>
        </Link>
      </div>
      
      <Card className="max-w-md w-full">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl text-center">{t(activeTab === "login" ? "login" : "signup")}</CardTitle>
          <CardDescription className="text-center">
            {t(activeTab === "login" ? "loginDescription" : "signupDescription")}
          </CardDescription>
        </CardHeader>
        
        <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
          <div className="px-6">
            <TabsList className="grid grid-cols-2 w-full">
              <TabsTrigger value="login">{t("login")}</TabsTrigger>
              <TabsTrigger value="register">{t("signup")}</TabsTrigger>
            </TabsList>
          </div>
          
          <TabsContent value="login" className="p-0">
            <Form {...loginForm}>
              <form onSubmit={loginForm.handleSubmit(onLoginSubmit)}>
                <CardContent className="pt-4 space-y-4">
                  <FormField
                    control={loginForm.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>{t("emailLabel")}</FormLabel>
                        <FormControl>
                          <Input placeholder="email@example.com" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={loginForm.control}
                    name="password"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>{t("passwordLabel")}</FormLabel>
                        <FormControl>
                          <Input type="password" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <div className="flex items-center justify-between">
                    <FormField
                      control={loginForm.control}
                      name="rememberMe"
                      render={({ field }) => (
                        <FormItem className="flex items-center space-x-2">
                          <FormControl>
                            <Checkbox
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                          <FormLabel className="!mt-0 text-sm font-normal cursor-pointer">
                            {t("rememberMe")}
                          </FormLabel>
                        </FormItem>
                      )}
                    />
                    <Link href="#" className="text-sm text-primary hover:underline">
                      {t("forgotPassword")}
                    </Link>
                  </div>
                </CardContent>
                <CardFooter className="flex flex-col space-y-4">
                  <Button
                    type="submit"
                    className="w-full"
                    disabled={loginMutation.isPending}
                  >
                    {loginMutation.isPending ? t("signingIn") : t("login")}
                  </Button>
                  <p className="text-sm text-gray-500 text-center">
                    {t("dontHaveAccount")}{" "}
                    <Link href="/auth?mode=register" className="text-primary hover:underline">
                      {t("signup")}
                    </Link>
                  </p>
                </CardFooter>
              </form>
            </Form>
          </TabsContent>
          
          <TabsContent value="register" className="p-0">
            <Form {...registerForm}>
              <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)}>
                <CardContent className="pt-4 space-y-4">
                  <FormField
                    control={registerForm.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>{t("nameLabel")}</FormLabel>
                        <FormControl>
                          <Input placeholder="John Doe" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={registerForm.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>{t("emailLabel")}</FormLabel>
                        <FormControl>
                          <Input placeholder="email@example.com" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={registerForm.control}
                    name="password"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>{t("passwordLabel")}</FormLabel>
                        <FormControl>
                          <Input type="password" {...field} />
                        </FormControl>
                        <div className="space-y-1 text-xs text-gray-500 mt-1">
                          <p>{t("passwordMinLength")}</p>
                          <p>{t("passwordSpecialChar")}</p>
                          <p>{t("passwordNumber")}</p>
                        </div>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={registerForm.control}
                    name="confirmPassword"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>{t("confirmPasswordLabel")}</FormLabel>
                        <FormControl>
                          <Input type="password" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </CardContent>
                <CardFooter className="flex flex-col space-y-4">
                  <Button
                    type="submit"
                    className="w-full"
                    disabled={registerMutation.isPending}
                  >
                    {registerMutation.isPending ? t("creatingAccount") : t("signup")}
                  </Button>
                  <p className="text-sm text-gray-500 text-center">
                    {t("alreadyHaveAccount")}{" "}
                    <Link href="/auth?mode=login" className="text-primary hover:underline">
                      {t("login")}
                    </Link>
                  </p>
                </CardFooter>
              </form>
            </Form>
          </TabsContent>
        </Tabs>
      </Card>
      
      <div className="mt-8 text-center">
        <p className="text-sm text-gray-500">
          {t("copyright")} © 2023 Alice. {t("to")} <Link href="#" className="text-primary hover:underline">Terms of Service</Link> {t("or")} <Link href="#" className="text-primary hover:underline">Privacy Policy</Link>.
        </p>
      </div>
    </div>
  );
}